# -*- coding: utf-8 -*-
"""YouTube_Entity_Graph_Benchmark.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D6l9aJij0nXt-an2DPw-46BTmXuEhRuS
"""

!pip install youtube-dl
!pip install pytube
!pip install rdflib
!pip install pydotplus
!pip install graphviz

import youtube_dl
from pytube import YouTube
import io
import numpy as np
import pandas as pd
from rdflib import Graph, Literal, RDF, URIRef, Namespace
from rdflib.namespace import RDF, RDFS
import pydotplus
from IPython.display import display, Image
from rdflib.tools.rdf2dot import rdf2dot

# videos from crawler
def get_youtube_video_IDs():
    video_IDs = pd.read_csv(r'/content/drive/MyDrive/EntityGraph/Data/Videos/Video_Ids_comlete.csv')
    video_IDs = video_IDs['0']
    return video_IDs

video_IDs = get_youtube_video_IDs()
print(print(f'we work with {len(video_IDs)} videos'))
print(video_IDs)

# randomly compare some videos
url_0 = 'https://www.youtube.com/watch?v=' + video_IDs[0]
url_1 = 'https://www.youtube.com/watch?v=' + video_IDs[10]
url_2 = 'https://www.youtube.com/watch?v=' + video_IDs[1000]

# video-info as entity in node
def video_info(url):
    ydl_opts = {}
    with youtube_dl.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=False)

        #description = info["description"] # nur fÃ¼r die KI-Verfahren als Annotation
        title = info["title"]
        author = info["uploader"]
        thumb = info["thumbnail"]
        duration = info["duration"]
        
        video_information = pd.DataFrame(data= {'Title': [title],
                                                'Author' : [author],                                              
                                                'Duration': [duration],
                                                'Thumbnail' : [thumb]},
                                         index=[url])
        video_information.index.name = 'VideoURL'
        return video_information

# graph initialization
g = Graph()

# generate uri's
video_0_frame = video_info(url_0)
video_1_frame = video_info(url_1)
video_2_frame = video_info(url_2)

identifier_0 = video_0_frame.index[0]
identifier_1 = video_1_frame.index[0]
identifier_2 = video_2_frame.index[0]

# fill the graph
video_0 = np.array(video_info(url_0)).reshape(4)
video_1 = np.array(video_info(url_1)).reshape(4)
video_2 = np.array(video_info(url_2)).reshape(4)

video_entity_0 = URIRef(identifier_0)
video_entity_1 = URIRef(identifier_1)
video_entity_2 = URIRef(identifier_2)

g.add((video_entity_0, RDF.Property, Literal(video_0)))
g.add((video_entity_1, RDF.Property, Literal(video_1)))
g.add((video_entity_2, RDF.Property, Literal(video_2)))

# get graph & triples (s,p,o)
print('Graph g:\n', g.serialize(format='ttl'))
print(f'Graph g has {len(g)} facts')
for triples in g:
    print(f'triples{triples}')

# define esco skills   
skill_0 = URIRef('http://data.europa.eu/esco/model#skill_0')
skill_1 = URIRef('http://data.europa.eu/esco/model#skill_1')
skill_2 = URIRef('http://data.europa.eu/esco/model#skill_2')
same_skill = URIRef('http://data.europa.eu/esco/model#same_skill')

skill_type = URIRef('http://data.europa.eu/esco/model#skillType')

g.add((video_entity_0, skill_type, skill_0))
g.add((video_entity_1, skill_type, skill_1))
g.add((video_entity_2, skill_type, skill_2))

g.add((video_entity_0, skill_type, same_skill))
g.add((video_entity_1, skill_type, same_skill))
g.add((video_entity_2, skill_type, same_skill))

# plot the graph
def visualize(current_graph):
    stream = io.StringIO()
    rdf2dot(current_graph, stream, opts = {display})
    dg = pydotplus.graph_from_dot_data(stream.getvalue())
    png = dg.create_png()
    display(Image(png))

visualize(g)

# download graph & get a better plot!--> https://www.ldf.fi/service/rdf-grapher
g.serialize(destination='example_graph_0.ttl')